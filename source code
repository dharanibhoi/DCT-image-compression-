package imagecompression;


import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.*;
import java.io.*; 

public class imagecompression {
public static int[][] y1=new int[8][8];
public static int[][] r1=new int[160][160];
public static int[][] g1=new int[8][8];
public static int[][] b1=new int[8][8];
public static int[][] u1=new int[8][8];
public static int[][] v1=new int[8][8];
public static int[] c1=new int[64];
public static int[] c2=new int[64];
public static int[] c3=new int[64];
public static int[] c4=new int[64];
public static int[] c5=new int[64];
public static int[] c6=new int[64];
public static int[] c7=new int[64];
public static int[] c8=new int[64];
public static int[] c9=new int[64];
public static int[][] c10=new int[8][8];
public static int[][] c11=new int[8][8];
public static int[][] c12=new int[8][8];
static int rgb2[][]=new int[200][200];
static int rgb3[][]=new int[1600][1600];
static int rgb4[][]=new int[1600][1600];
public static BufferedImage img1 = new BufferedImage(160, 160,BufferedImage.TYPE_INT_RGB);
public static  BufferedImage imgs[] = new BufferedImage[400];
   public static final int N = 8;

    
   

public static void main(String[] args) {
    String or = "d.jpg";// input image file source image shoul be 160x160 pixel
     File file = new File(or); 
     try{
        FileInputStream fis = new FileInputStream(file);  
        BufferedImage image = ImageIO.read(fis); 
    
        int rows = 20; 
        int cols = 20;  
        int chunks = rows * cols;  
  
        int chunkWidth = image.getWidth() / cols; 
        int chunkHeight = image.getHeight() / rows;  
        int count = 0;  

        for (int x = 0; x < rows; x++) {  
            for (int y = 0; y < cols; y++) {  
                
                imgs[count] = new BufferedImage(chunkWidth, chunkHeight, image.getType());  
  
            
                Graphics2D gr = imgs[count++].createGraphics();  
                gr.drawImage(image, 0, 0, chunkWidth, chunkHeight, chunkWidth * y, chunkHeight * x, chunkWidth * y + chunkWidth, chunkHeight * x + chunkHeight, null);  
                gr.dispose();  
            }  
        }  
    
    
   
      
    
      }
     catch (IOException e) { 
        e.printStackTrace();
    }    
    int rgb1;
    int r[][];
int l,m=0,s=0,x = 0,y = 0;
int j1,i1;
int c=0;
int n=0;
for (int p=0;p<400;p++){
  
   
   BufferedImage img;
  
  

   
        int total = imgs[p].getHeight() * imgs[p].getWidth();

        int[][] pixelData = new int[total][3];
        int rgb[];
         
    

        int counter = 0;
        for(int i = 0; i < imgs[p].getHeight(); i++){
            for(int j = 0; j < imgs[p].getWidth(); j++){
              rgb = getPixelData(imgs[p], i, j);

                for(int k = 0; k < rgb.length; k++){
                    pixelData[counter][k] = rgb[k];
                }

                counter++;
            }
        }
      
        DCT dctApplied = new DCT();

        
         int[][] F = dctApplied.forwardDCT(y1);    
          int[][]  q2=dctApplied.quantitizeImage(F);
           int[][] Fu = dctApplied.forwardDCT(u1);    
         int[][]  qu2=dctApplied.quantitizeImage(Fu);
            int[][] Fv = dctApplied.forwardDCT(v1);    
         int[][]  qv2=dctApplied.quantitizeImage(Fv); 
     for(int i=0;i<8;i++){
       for(int j=0;j<8;j++){
      int temp =i*8+j;
      c1[temp]=q2[i][j];
      c2[temp]=qu2[i][j];
      c3[temp]=qv2[i][j];
      
       }       
       }
     int[] c4= dctApplied.compressImage(c1);
     int[] c5= dctApplied.compressImage(c2); 
     int[] c6= dctApplied.compressImage(c3); 
     
         int[] c7= dctApplied.decompressImage(c4);
             int[] c8= dctApplied.decompressImage(c5);
                 int[] c9= dctApplied.decompressImage(c6);
            for(int i=0;i<8;i++){
       for(int j=0;j<8;j++){
      int temp =i*8+j;
    c10[i][j]=c7[temp];
     c11[i][j]=c8[temp];
      c12[i][j]=c9[temp];
       }       
       }
            
         
     
     
       int[][]  q3=dctApplied.dequantitizeImage(c10);  
       int[][] y2 = dctApplied.inverseDCT(q3);      
         int[][]  qu3=dctApplied.dequantitizeImage(c11);  
       int[][] u2 = dctApplied.inverseDCT(qu3);
       int[][]  qv3=dctApplied.dequantitizeImage(c12);  
       int[][] v2 = dctApplied.inverseDCT(qv3);
    
    
        for (int i=0;i<N;i++){
        for (int j=0;j<N;j++){
               
          r1 [i][j] =(int )(y2[i][j]+(1.3983*v2[i][j])); 
          g1[i][j]=(int) (y2[i][j]-(0.394*u2[i][j])-(0.58*v2[i][j]));
          b1 [i][j] =(int )(y2[i][j]-(2.032*u2[i][j]));
          
         
        if (r1[i][j]<0||g1[i][j]<0||b1[i][j]<0){
             r1[i][j]=0;
             g1[i][j]=0;
             b1[i][j]=0;
             
         }
          if (r1[i][j]>255||g1[i][j]>255||b1[i][j]>255){
             r1[i][j]=255;
             g1[i][j]=255;
             b1[i][j]=255;
             
         }
           
         
        }
        }
        
       

  for(i1=0;i1<8;i1++)
	{c=0;
		for(j1=0;j1<8;j1++)
		{
                    
                    rgb4[m+i1][s+j1]=b1[i1][j1];
                    rgb3[m+i1][s+j1]=g1[i1][j1];
			rgb2[m+i1][s+j1]=r1[i1][j1];
			c++;
                    
		}
	}
	//if((c%64==0) && c!=(20*64))
	//{
		s=s+8;
	//}
	if(s==152 )
	{
		
		m=m+8;
	}
       if(s==160)
           s=0;
    
 /*Color White = new Color(r1[i][j],g1[i][j],b1[i][j]);
  rgb1[i][j]=  White.getRGB();
   img1.setRGB(i,j,rgb1);
*/
        
    
    
  


}

for(int i=0;i<160;i++){
for(int j=0;j<160;j++){
                   Color White = new Color(rgb2[i][j],rgb3[i][j],rgb4[i][j]);
  rgb1=  White.getRGB();
  img1.setRGB(j,i, rgb1);
}
}
 
File outputfile = new File("compressed1.jpg");
try{
ImageIO.write(img1,"jpg",outputfile);    
}
catch (IOException e) { 
        e.printStackTrace();
    }


}


  

 


 
private static int[] getPixelData(BufferedImage img, int h, int w) {
    int y,u,v;
int argb = img.getRGB(w, h);

int rgb[] = new int[] {
    (argb >> 16) & 0xff, 
    (argb >>  8) & 0xff, 
    (argb      ) & 0xff  
};



 y = (int) (0.299*rgb[0]+0.587* rgb[1]+0.114*rgb[2]);
  u = (int) ((rgb[1]-y)*0.492f);
  v = (int) ((rgb[0]-y)*.877f);


y1[h][w]=y;
u1[h][w]=u;
v1[h][w]=v;

return rgb;
}
 
}
class DCT{
    public int N        = 8;
     public int QUALITY  = 25; // quality of the image
     public int ROWS     = 320;
     public int COLS     = 240;
      public int zigZag[][] = new int[64][2];
       public double c[][]        = new double[N][N];
       
    public double cT[][]       = new double[N][N];
public int quantum[][]     = new int[N][N];
 public int resultDCT[][] = new int[ROWS][COLS];
   public DCT()
    {
        initZigZag();
        initMatrix(QUALITY);
    }
 private void initMatrix(int quality)
    {
        int i;
        int j;

        for (i = 0; i < N; i++)
        {
            for (j = 0; j < N; j++)
            {
                quantum[i][j] = (1 + ((1 + i + j) * quality));
            }
        }

        for (j = 0; j < N; j++)
        {
            double nn = (double)(N);
            c[0][j]  = 1.0 / Math.sqrt(nn);
            cT[j][0] = c[0][j];
        }

        for (i = 1; i < 8; i++)
        {
            for (j = 0; j < 8; j++)
            {
                double jj = (double)j;
                double ii = (double)i;
                c[i][j]  = Math.sqrt(2.0/8.0) * Math.cos(((2.0 * jj + 1.0) * ii * Math.PI) / (2.0 * 8.0));
                cT[j][i] = c[i][j];
            }
        }
    }
  private void initZigZag()
    {
        zigZag[0][0] = 0; // 0,0
        zigZag[0][1] = 0;
        zigZag[1][0] = 0; // 0,1
        zigZag[1][1] = 1;
        zigZag[2][0] = 1; // 1,0
        zigZag[2][1] = 0;
        zigZag[3][0] = 2; // 2,0
        zigZag[3][1] = 0;
        zigZag[4][0] = 1; // 1,1
        zigZag[4][1] = 1;
        zigZag[5][0] = 0; // 0,2
        zigZag[5][1] = 2;
        zigZag[6][0] = 0; // 0,3
        zigZag[6][1] = 3;
        zigZag[7][0] = 1; // 1,2
        zigZag[7][1] = 2;
        zigZag[8][0] = 2; // 2,1
        zigZag[8][1] = 1;
        zigZag[9][0] = 3; // 3,0
        zigZag[9][1] = 0;
        zigZag[10][0] = 4; // 4,0
        zigZag[10][1] = 0;
        zigZag[11][0] = 3; // 3,1
        zigZag[11][1] = 1;
        zigZag[12][0] = 2; // 2,2
        zigZag[12][1] = 2;
        zigZag[13][0] = 1; // 1,3
        zigZag[13][1] = 3;
        zigZag[14][0] = 0; // 0,4
        zigZag[14][1] = 4;
        zigZag[15][0] = 0; // 0,5
        zigZag[15][1] = 5;
        zigZag[16][0] = 1; // 1,4
        zigZag[16][1] = 4;
        zigZag[17][0] = 2; // 2,3
        zigZag[17][1] = 3;
        zigZag[18][0] = 3; // 3,2
        zigZag[18][1] = 2;
        zigZag[19][0] = 4; // 4,1
        zigZag[19][1] = 1;
        zigZag[20][0] = 5; // 5,0
        zigZag[20][1] = 0;
        zigZag[21][0] = 6; // 6,0
        zigZag[21][1] = 0;
        zigZag[22][0] = 5; // 5,1
        zigZag[22][1] = 1;
        zigZag[23][0] = 4; // 4,2
        zigZag[23][1] = 2;
        zigZag[24][0] = 3; // 3,3
        zigZag[24][1] = 3;
        zigZag[25][0] = 2; // 2,4
        zigZag[25][1] = 4;
        zigZag[26][0] = 1; // 1,5
        zigZag[26][1] = 5;
        zigZag[27][0] = 0; // 0,6
        zigZag[27][1] = 6;
        zigZag[28][0] = 0; // 0,7
        zigZag[28][1] = 7;
        zigZag[29][0] = 1; // 1,6
        zigZag[29][1] = 6;
        zigZag[30][0] = 2; // 2,5
        zigZag[30][1] = 5;
        zigZag[31][0] = 3; // 3,4
        zigZag[31][1] = 4;
        zigZag[32][0] = 4; // 4,3
        zigZag[32][1] = 3;
        zigZag[33][0] = 5; // 5,2
        zigZag[33][1] = 2;
        zigZag[34][0] = 6; // 6,1
        zigZag[34][1] = 1;
        zigZag[35][0] = 7; // 7,0
        zigZag[35][1] = 0;
        zigZag[36][0] = 7; // 7,1
        zigZag[36][1] = 1;
        zigZag[37][0] = 6; // 6,2
        zigZag[37][1] = 2;
        zigZag[38][0] = 5; // 5,3
        zigZag[38][1] = 3;
        zigZag[39][0] = 4; // 4,4
        zigZag[39][1] = 4;
        zigZag[40][0] = 3; // 3,5
        zigZag[40][1] = 5;
        zigZag[41][0] = 2; // 2,6
        zigZag[41][1] = 6;
        zigZag[42][0] = 1; // 1,7
        zigZag[42][1] = 7;
        zigZag[43][0] = 2; // 2,7
        zigZag[43][1] = 7;
        zigZag[44][0] = 3; // 3,6
        zigZag[44][1] = 6;
        zigZag[45][0] = 4; // 4,5
        zigZag[45][1] = 5;
        zigZag[46][0] = 5; // 5,4
        zigZag[46][1] = 4;
        zigZag[47][0] = 6; // 6,3
        zigZag[47][1] = 3;
        zigZag[48][0] = 7; // 7,2
        zigZag[48][1] = 2;
        zigZag[49][0] = 7; // 7,3
        zigZag[49][1] = 3;
        zigZag[50][0] = 6; // 6,4
        zigZag[50][1] = 4;
        zigZag[51][0] = 5; // 5,5
        zigZag[51][1] = 5;
        zigZag[52][0] = 4; // 4,6
        zigZag[52][1] = 6;
        zigZag[53][0] = 3; // 3,7
        zigZag[53][1] = 7;
        zigZag[54][0] = 4; // 4,7
        zigZag[54][1] = 7;
        zigZag[55][0] = 5; // 5,6
        zigZag[55][1] = 6;
        zigZag[56][0] = 6; // 6,5
        zigZag[56][1] = 5;
        zigZag[57][0] = 7; // 7,4
        zigZag[57][1] = 4;
        zigZag[58][0] = 7; // 7,5
        zigZag[58][1] = 5;
        zigZag[59][0] = 6; // 6,6
        zigZag[59][1] = 6;
        zigZag[60][0] = 5; // 5,7
        zigZag[60][1] = 7;
        zigZag[61][0] = 6; // 6,7
        zigZag[61][1] = 7;
        zigZag[62][0] = 7; // 7,6
        zigZag[62][1] = 6;
        zigZag[63][0] = 7; // 7,7
        zigZag[63][1] = 7;
    }
 public int [][] forwardDCT(int input[][])
    {
        int output[][] = new int[N][N];
        double temp[][] = new double[N][N];
        double temp1;
        int i;
        int j;
        int k;

        for (i = 0; i < N; i++)
        {
            for (j = 0; j < N; j++)
            {
                temp[i][j] = 0.0;
                for (k = 0; k < N; k++)
                {
                    temp[i][j] += (((int)(input[i][k]) - 128) * cT[k][j]);
                }
            }
        }

        for (i = 0; i < N; i++)
        {
            for (j = 0; j < N; j++)
            {
                temp1 = 0.0;

                for (k = 0; k < N; k++)
                {
                    temp1 += (c[i][k] * temp[k][j]);
                }

                output[i][j] = (int)Math.round(temp1);
            }
        }

        return output;
    }
 public int[][] quantitizeImage(int inputData[][])
    {
        int outputData[][] = new int[N][N];
        int i = 0;
        int j = 0;
        int a = 0;
        int b = 0;
        int row;
        int col;

        double result;
        boolean zigzag = true;
        if (zigzag)
        {
            for (i = 0; i < (N*N); i++)
            {
                row = zigZag[i][0];
                col = zigZag[i][1];
                result = (inputData[row][col] / quantum[row][col]);
                outputData[row][col] = (int)(Math.round(result));
            }

        }

        else
        {
            for (i=0; i<N; i++)
            {
                for (j=0; j<N; j++)
                {
                    result = inputData[i][j] / quantum[i][j];
                    outputData[i][j] = (int)(Math.round(result));
                }
            }
        }

        return outputData;
    }
   public int[][] dequantitizeImage(int[][] inputData )
    {
        int i = 0;
        int j = 0;
        int a = 0;
        int b = 0;
        int row;
        int col;
        int outputData[][] = new int[N][N];

        double result;
boolean zigzag=true;
        if (zigzag)
        {
            for (i=0; i<(N*N); i++)
            {
                row = zigZag[i][0];
                col = zigZag[i][1];

                result = inputData[row][col] * quantum[row][col];
                outputData[row][col] = (int)(Math.round(result));
            }
        }

        else
        {
            for (i=0; i<8; i++)
            {
                for (j=0; j<8; j++)
                {
                    result = inputData[i][j] * quantum[i][j];
                    outputData[i][j] = (int)(Math.round(result));
                }
            }
        }

        return outputData;
    }
    public int[][] inverseDCT(int input[][])
    {
        int output[][] = new int[N][N];
        double temp[][] = new double[N][N];
        double temp1;
        int i;
        int j;
        int k;

        for (i=0; i<N; i++)
        {
            for (j=0; j<N; j++)
            {
                temp[i][j] = 0.0;

                for (k=0; k<N; k++)
                {
                    temp[i][j] += input[i][k] * c[k][j];
                }
            }
        }

        for (i=0; i<N; i++)
        {
            for (j=0; j<N; j++)
            {
                temp1 = 0.0;

                for (k=0; k<N; k++)
                {
                    temp1 += cT[i][k] * temp[k][j];
                }

                temp1 += 128.0;

                if (temp1 < 0)
                {
                    output[i][j] = 0;
                }
                else if (temp1 > 255)
                {
                    output[i][j] = 255;
                }
                else
                {
                     output[i][j] = (int)Math.round(temp1);
                }
            }
        }

        return output;
    }
   public int[] compressImage(int[] QDCT)//run length encdodin
{ 
        int i = 0;
        int j = 0;
        int k = 0;
        int temp = 0;
        int curPos = 0;
        int runCounter = 0;
        int imageLength = 64;

        int pixel[] = new int[64];

        while((i<imageLength))
        {
            temp = QDCT[i];

            while((i < imageLength) && (temp == QDCT[i]))
            {
                runCounter++;
                i++;
            }

            if (runCounter > 4)
            {
                pixel[j] = 255;
                j++;
                pixel[j] = temp;
                j++;
                pixel[j] = runCounter;
                j++;
            }
            else
            {
                for (k=0; k<runCounter; k++)
                {
                    pixel[j] = temp;
                    j++;
                }
            }

           
            runCounter = 0;
            //i++;
        }

        return pixel;
    } 
   public int[] decompressImage(int[] DCT)//run length deocde
    {
        int i = 0;
        int j = 0;
        int k = 0;
        int temp = 0;
        int imageLength = 64;
        int pixel[] = new int[64];

        while (i < imageLength)
        {
            temp = DCT[i];

            if (k < imageLength)
            {
                if (temp == 255)
                {
                    i++;
                    int value = DCT[i];
                    i++;
                    int length = DCT[i];

                    for(j=0; j<length; j++)
                    {
                        pixel[k] = value;
                        k++;
                    }
                }

                else
                {
                    pixel[k] = temp;
                    k++;
                }
            }
           

            i++;
        }

       

        return pixel;
    }
    
}

